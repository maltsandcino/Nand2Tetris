// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
	
	//Prep path 1:

	//zx

	Mux16 (a[0..15]=x[0..15], b[0..15]=false, sel=zx, out=zeroX);

	//nx:
	
	Not16 (in=zeroX, out=zeroXnotted);
	Mux16 (a[0..15]=zeroX, b[0..15]=zeroXnotted, sel=nx, out=functionX);

	

	//Prep path 2:

	//zy

	Mux16 (a[0..15]=y[0..15], b[0..15]=false, sel=zy, out[0..15]=zeroY);
	
	//ny:
	
	Not16 (in[0..15]=zeroY, out[0..15]=zeroYnotted);
	Mux16 (a[0..15]=zeroY, b[0..15]=zeroYnotted, sel=ny, out[0..15]=functionY);


	//Function Path

	Add16 (a[0..15]=functionX, b[0..15]=functionY, out[0..15]=outAdd);
	And16 (a[0..15]=functionX, b[0..15]=functionY, out[0..15]=outAnd);
	Mux16 (a[0..15]=outAnd, b[0..15]=outAdd, sel=f, out[0..15]=outFunction);

	//Output Handling

	Not16 (in[0..15]=outFunction, out[0..15]=nottedOutFunction);

	//Send some of the output below out in another branch for final checks, with several out statements
	Mux16 (a[0..15]=outFunction, b[0..15]=nottedOutFunction, sel=no, out[0..15]=out[0..15], out[0..7]=or1, out[8..15]=or2, out[15]=negcheck);

	

	////Secondary Outputs: The first to see if the number is negative, the second to see if the number is 0

	And (a=negcheck, b=true, out=ng);


	//Is number zero?
	
	//Here we need to pick up where we left off with the final output

	Or8Way (in=or1, out=finalcheck1);
	Or8Way (in=or2, out=finalcheck2);
	
	Or (a=finalcheck1, b=finalcheck2, out=todozr);
	Not (in=todozr, out=zr);
	
	
	
	


	

	

	

	

	
    
}