1.2 Notes Boolean Function Synthesis


X	Y	Z	F

0	0	0	1
0	0	1	0
0	1	0	1
0	1	1	1
1	0	0	1
1	0	1	0
1	1	0	0
1	1	1	0

Disjunctive Normal Form

(Not(x) AND Not(y) and Not(z)) == True
(Not(x) and y and Not(z)) == True
(X and Not(y) and Not(z)) == True

(Not(x) AND Not(y) and Not(z)) or (Not(x) and y and Not(z)) or (X and Not(y) and Not(z)) == True

==
(Not(x) and Not(z)) OR (Not(y) and Not(z))

==

Not(z)  AND (Not(x) or Not(y)

Any Boolean can be represented in an expression using only AND OR and NOT

OR:

Just And and Not

Because: (x or y) = Not(Not(x) and Not(y))

NAND
----
0	0	1
0	1	1
1	0	1
1	1	0

NAND(x,y) == Not(X AND Y )
NAND(x, x) == Not(x)

These Booleans can also be represented as just NAND gates

----------Important--------------
|				|
| Not(x) = (x Nand X)		|
|				|
| (x and y) = Not(x NAND y)	|
---------------------------------

